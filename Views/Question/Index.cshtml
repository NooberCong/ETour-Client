@model QuestionListModel

@{
    ViewData["Title"] = "Questions";
    var tblId = "questionTbl";
}

<input type="hidden" id="hubUrl" value="@Model.QAHubUrl" />
<input type="hidden" asp-for="UserID" id="userID" />

<div class="container py-5">
    <h3 class="mb-5">My Questions</h3>

    <div class="table-responsive">
        <table id="@tblId" class="table">
            <thead>
                <tr>
                    <th scope="col" class="text-center">Title</th>
                    <th scope="col" class="text-center">Date</th>
                    <th scope="col" class="text-center">Category</th>
                    <th scope="col" class="text-center">Status</th>
                    <th scope="col" class="text-center no-ordering">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var q in Model.Questions)
                {
                    <tr>
                        <td class="text-center">@q.Title</td>
                        <td class="text-center">@q.LastUpdated</td>
                        <td class="text-center">@q.Category</td>
                        <td class="text-center"><span class="@q.Status.Badge()">@q.Status.ToCustomString()</span></td>
                        <td class="text-center">
                            <a asp-action="Detail" asp-route-id=@q.ID class="text-primary mr-3"><i class="far fa-eye"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <h3 class="my-5">Type your question here</h3>
    <form asp-action="Create" method="post" id="submitForm">
        <input type="hidden" asp-for="@Model.Question.ID" value="0" />
        <div class="form-group">
            <b> <label asp-for="@Model.Question.Title"></label></b>
            <input asp-for="@Model.Question.Title" type="text" class="form-control" placeholder="Enter title" id="title">
            <span class="text-danger" asp-validation-for="@Model.Question.Title"></span>
        </div>
        <div class="form-group">
            <b><label asp-for="@Model.Question.Content"></label></b>
            <textarea asp-for="@Model.Question.Content" type="text" rows="5" cols="20" class="form-control" placeholder="Type the question here" id="areaText"></textarea>
            <span class="text-danger" asp-validation-for="@Model.Question.Content"></span>
        </div>
        <div class="form-group">
            <b> <label asp-for="@Model.Question.Category"></label></b>
            <select asp-for="@Model.Question.Title" class="selectpicker" asp-items="@Html.GetEnumSelectList<Question.QuestionCategory>()" id="category"></select>
        </div>
        <button type="submit" class="btn btn-primary mb-2">Submit</button>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <partial name="_DataTable" model="@tblId" />
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/moment/moment.min.js"></script>

    <script>

        var connection = new signalR.HubConnectionBuilder()
            .withUrl($("#hubUrl").val())
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(() => console.log("Connect to server success")).catch(err => console.log(`Connect to server failed, error: ${err}`));

        async function submitQuestion(e) {
            console.log("Hello world");
            e.preventDefault();
            $(e.target).validate();
            if ($(e.target).valid()) {
                let authorId = document.getElementById("userID").value;
                let title = document.getElementById("title").value;
                let category = document.getElementById("category").value;
                try {
                    await sendQuestion(authorId, title, category);
                } catch (err) {
                    console.log(err);
                }
                e.target.submit();
            }
        }

        let questionForm = document.getElementById("submitForm");
        questionForm.addEventListener('submit', submitQuestion);

        async function sendQuestion(authorId, title, category) {

            if (title && title.length) {
                await connection.invoke('sendQuestions', authorId, title, category);
            } else {
                console.log("Can't send");
            }
        }
    </script>
}